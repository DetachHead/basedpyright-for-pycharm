{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Pyright for PyCharm user documentation","text":"<p>This site serves as the user documentation for the Pyright PyCharm plugin.</p> <p>The plugin runs and reroutes Pyright's diagnostics back to your IDE. Both PyCharm Professional and PyCharm Community users can use it.</p> Looking for the old LSP plugin? <p>It now has its own documentation site.</p>"},{"location":"#usage","title":"Usage","text":"<p>Go to Settings | Tools | Pyright (Global) / Pyright (Project) and set the path to your Pyright executable(s).</p> GlobalProject <p></p> <p></p> <p>Save, return to your files and start making some modifications. You should see Pyright annotations in a few seconds. If not, refer to Problems and solutions.</p>"},{"location":"actions/","title":"IDE actions","text":"<p>The plugins provide some IDE actions that are accessible via the Actions panel.</p>"},{"location":"actions/#copy-pyright-command","title":"Copy Pyright command","text":"<p>This action copies the Pyright command that would be used for the current file to clipboard.</p> <p>It does not differentiate file types and thus will be available for every file even if the annotator doesn't run on the given file.</p> <p>Note</p> <p>The copied command is not OS-dependent and may not work as-is when pasted into the shell.</p>"},{"location":"faq/","title":"Frequently asked questions","text":""},{"location":"faq/#my-code-should-have-nothese-errors-but-it-doesdoesnt","title":"My code should have no/these errors, but it does/doesn't.","text":"<p>This plugin contains no type checking logic. For type checking bugs, please report them to the Pyright issue tracker.</p>"},{"location":"faq/#whats-the-difference-between-the-pyright-and-pyright-python-files","title":"What's the difference between the <code>pyright</code> and <code>pyright-python</code> files?","text":"<p>Pyright is written in TypeScript and officially published on NPM, mainly for the purpose of better integration with VSCode. This requires a dependency on Node, which Python developers might not have on their development machines.</p> <p>The PyPI <code>pyright</code> package was created to solve this problem. When installed, it places 4 proxy executables in the same virtual environment/directory you have your <code>pip</code> in:</p> <ul> <li><code>pyright</code>/<code>pyright-langserver</code> (these have the same names as the originals)</li> <li><code>pyright-python</code>/<code>pyright-python-langserver</code></li> </ul> <p>These proxies will automatically install the actual NPM package if it is not already installed, then re-output the results of the original executables. With the correct configurations, new versions may be automatically installed at runtime.</p> <p>If the corresponding version of the NPM package has not been installed, the proxies will also re-output the \"added 1 package\" notice by NPM, which will cause parsing errors. Due to this, it is recommended that the original executables are used instead.</p> <p>Said original executables can typically be found at:</p> <ul> <li>Windows: <code>%HOMEPATH%/.cache/pyright-python/&lt;version&gt;/node_modules/.bin</code></li> <li>Linux: <code>~/.cache/pyright-python/&lt;version&gt;/node_modules/.bin</code></li> </ul>"},{"location":"faq/#why-does-the-plugin-have-to-perform-saves-so-often-in-command-line-mode","title":"Why does the plugin have to perform saves so often in command line mode?","text":"<p>Pyright only reads actual files on disk. It does not support passing files from stdin. A feature request was made and quickly rejected.</p> <p>Adding an option that makes the plugin run only on \"manual\" saves (the Save All action) is counter-productive, since that doesn't guarantee the annotator class is called. This is a known limitation.</p> <p>Use the LSP4IJ mode instead.</p>"},{"location":"faq/#is-the-command-line-watch-mode-watch-supported","title":"Is the command-line watch mode (<code>--watch</code>) supported?","text":"<p>No. Use LSP4IJ mode instead.</p>"},{"location":"faq/#what-does-this-command-line-option-do","title":"What does this command line option do?","text":"<p>Refer to Pyright's documentation for the meaning of these options.</p>"},{"location":"faq/#is-this-plugin-affiliated-with-microsoftjetbrains","title":"Is this plugin affiliated with Microsoft/JetBrains?","text":"<p>No, or at least not in a business or ownership sense.</p> <p>It was, however, created out of adoration of Pyright and JetBrains IDEs.</p>"},{"location":"faq/#i-love-this-project-how-can-i-support-it","title":"I love this project. How can I support it?","text":"<p>You can consider sponsoring it.</p> <p>If you are feeling generous, see <code>CONTRIBUTING.md</code> for how to contribute non-financially.</p>"},{"location":"features/","title":"Other features","text":""},{"location":"features/#executable-suggestion","title":"Executable suggestion","text":"<p>When a project is opened, a suggestion to set a file as the executable for that project is shown if:</p> <ul> <li>The interpreter of the project exists and is located inside it.</li> <li>There is a file named <code>pyright</code>/<code>pyright-langserver</code>   (with or without extension) among the siblings of the interpreter.</li> <li>The project executable is not yet given.</li> <li>The global executable is not preferred.</li> </ul> <p>Available actions:</p> <ul> <li>Absolute path: Set the absolute path.</li> <li>Relative path: Set the relative path (no leading dot).</li> <li>Do not suggest: Turn off the corresponding setting.</li> </ul> <p></p>"},{"location":"features/#suppressing-diagnostics-using-quick-fixes","title":"Suppressing diagnostics using quick fixes","text":"<p>Most diagnostics can be suppressed using their corresponding quick fixes:</p> BeforeAfter <p></p> <p></p> <p>If a comment already presents on that line, the new error code will be appended to the end of the list:</p> BeforeAfter <p></p> <p></p> <p>If the error has no corresponding code, the entire list will be removed:</p> BeforeAfter <p></p> <p></p>"},{"location":"features/#pyrightconfigjson-file-icon","title":"<code>pyrightconfig.json</code> file icon","text":"<p>In file-related views, the default JSON file icon for the <code>pyrightconfig.json</code> file is replaced with Pyright's logo.</p> Project tool window: <p></p> Editor tabs: <p></p> Breadcrumbs: <p></p>"},{"location":"how-to/","title":"How-to guides","text":""},{"location":"how-to/#how-to-install-the-pyright-executables","title":"How to install the Pyright executables","text":"<p>Choose one that works for you:</p> <pre><code>$ pip install pyright\n$ uv pip install pyright\n$ npm install pyright\n$ yarn add pyright\n$ pnpm install pyright\n$ bun install pyright\n$ brew install pyright\n</code></pre> <p>See also Pyright's official installation guide.</p>"},{"location":"how-to/#how-to-restart-the-language-server","title":"How to restart the language server","text":"<p>From the LSP Consoles of the Language Servers toolwindow, find the line that says \"Pyright\".</p> <p>Right click the line below it, then click \"Stop\". The line should then say \"Disabled\". Right click that line again, then click \"Restart\".</p> StopRestart <p></p> <p></p>"},{"location":"logging/","title":"Logging","text":"<p>For debugging purposes, the plugin may log some informational data. When reporting issues, always include the relevant log entries if applicable.</p>"},{"location":"logging/#where-to-find-the-ide-log-files","title":"Where to find the IDE log files","text":"<p>Open the action panel using Ctrl Shift A or your corresponding shortcut, then choose Show Log in Explorer. For macOS, this action is called Show Log in Finder.</p> <p>This should open a directory containing a file called <code>idea.log</code> and possibly other files that have the <code>idea.&lt;number&gt;.log</code> naming schema. <code>idea.log</code> is the most recent log file; <code>idea.&lt;number&gt;.log</code>s are archived ones.</p> <p>Open <code>idea.log</code> using your favourite text editor/reader. Note that it might be up to 10 MB in size.</p> <p>Alternatively, navigate to the directories documented here.</p>"},{"location":"logging/#command-line-mode","title":"Command line mode","text":"Event Content Searching keywords Command run Command properties (as JSON) <code>PyrightRunner - Running</code> Output retrieved Output of the process (as JSON) <code>PyrightRunner - Output</code> Exception caught Stack trace and properties (as JSON) <code>PyrightRunner - Exception properties</code>"},{"location":"logging/#commands","title":"Commands","text":"<p>Command entry format:</p> <pre><code>{\n    \"executable\": \"/path/to/executable\",\n    \"target\": \"/path/to/current/file\",\n    \"projectPath\": \"/path/to/project\",\n    \"extraArguments\": [\n        \"--outputjson\",\n        \"--project\",\n        \"/path/to/configuration/file/or/project\",\n        \"--pythonpath\",\n        \"/path/to/interpreter\"\n    ]\n}\n</code></pre> Using Python's type system <pre><code>type ExecutablePath = Annotated[PathLike[str], 'Path to executable']\ntype CurrentFilePath = Annotated[PathLike[str], 'Path to current file']\ntype ProjectPath = Annotated[PathLike[str], 'Path to project']\ntype ConfigurationFilePath = Annotated[PathLike[str], 'Path to configuration file or project']\ntype InterpreterPath = Annotated[PathLike[str], 'Path to interpreter']\n\nclass Command(TypedDict):\n    executable: ExecutablePath\n    target: CurrentFilePath\n    projectPath: ProjectPath\n    extraArguments: tuple[  # There might be other options.\n        Literal['--outputjson'],\n        Literal['--project'], ConfigurationFilePath,\n        Literal['--pythonpath'], InterpreterPath\n    ]\n</code></pre> <p>These properties may be used to reconstruct the command as follow (with proper escaping):</p> <pre><code>/path/to/executable /path/to/current/file \\\n    --outputjson\n    --project /path/to/configuration/file/or/project\n    --pythonpath /path/to/interpreter\n</code></pre> <p>Each command entry should have one corresponding output entry. If there are no such entries, look for the first command entry since IDE start. There should be a following stack trace explaining what went wrong.</p>"},{"location":"logging/#outputs","title":"Outputs","text":"<p>Outputs will always be in the officially documented format.</p>"},{"location":"logging/#exceptions","title":"Exceptions","text":"<p>Each stack traces is logged at <code>WARN</code> level and should be followed by a \"Exception properties\" line if it is for a Pyright exception.</p> <p>Exception properties entry format:</p> <pre><code>{\n    \"type\": \"(Fatal|InvalidConfigurations|InvalidParameters)Exception\",\n    \"stdout\": \"Stdout content\",\n    \"stderr\": \"Stderr content\",\n    \"message\": \"Error message\"\n}\n</code></pre> Using Python's type system <pre><code>class ExceptionClassName(StrEnum):\n    FatalException = auto()\n    InvalidConfigurationsException = auto()\n    InvalidParametersException = auto()\n\nclass ExceptionProperties(TypedDict):\n    type: ExceptionClassName\n    stdout: str\n    stderr: str\n    message: str\n</code></pre>"},{"location":"logging/#lsp4ij-mode","title":"LSP4IJ mode","text":"Event Content Keywords to look for Server start Language server settings <code>com.insyncwithfoo.pyright.lsp4ij.Client - Settings</code>"},{"location":"problems/","title":"Problems and solutions","text":""},{"location":"problems/#no-annotations","title":"No annotations","text":"<p>Make sure that:</p> <ul> <li>Your project has the correct interpreter set   (Project | Python Interpreter).</li> <li>The executable is given and is correct.</li> <li>The plugin itself is enabled (Plugins).</li> <li>The inspection entry is enabled.</li> </ul> <p>Other things to try:</p> <ul> <li>Reinstall the plugin or update to the latest version.</li> <li>Reopen the files, reopen the project or restart the IDE.</li> <li>Restart the language server (LSP4IJ mode).</li> <li>Restart your machine.</li> <li>Reinstall/reset the IDE.</li> </ul> <p>If the problem persists, please report it to the plugin's issue tracker with relevant log entries.</p>"},{"location":"problems/#fatal-error","title":"Fatal error","text":"<p>This most likely suggests a Pyright bug.</p> <p>Disable the plugin immediately to avoid hardware problems. Try to narrow the problem as much as possible, then report it to Pyright's issue tracker.</p>"},{"location":"problems/#cannot-parse-configuration-file","title":"Cannot parse configuration file","text":"<p>This most likely means that the configuration file is invalid in some way.</p> <p>Use the \"Open file\" action to directly open the file which is reported to be invalid.</p>"},{"location":"problems/#unrecognized-command-line-options","title":"Unrecognized command-line options","text":"<p>This most likely means that the executable you provide doesn't support the options used by the plugin.</p> <p>If you are using the official NPM package or the community-maintained PyPI package, please report the problem to the plugin's issue tracker along with the version of Pyright you are using, which can be retrieved by running <code>&lt;path-to-pyright&gt; --version</code> in your terminal.</p>"},{"location":"problems/#cannot-parse-output","title":"Cannot parse output","text":"<p>This most likely mean that there is an error while running the executable, which causes the output to be invalid as JSON and thus cannot be parsed. It could also mean that the output is valid JSON, but does not follow the officially documented schemas.</p> <p>Update Pyright to the latest version may help. For custom executables, maintain compatibility with said version.</p>"},{"location":"problems/#process-timed-out","title":"Process timed out","text":"<p>This means the process did not finish within the limit specified.</p> <p>There are multiple possible reasons for this. Increase the limit as necessary.</p>"},{"location":"problems/#other-inspections-are-taking-too-long","title":"Other inspections are taking too long","text":"<p>Since the command line mode invokes a command-line tool, it must be registered as an <code>ExternalAnnotator</code>. Inspectors of this kind will only run when all other background tasks have finished.</p> <p>Check your other plugins to see if this is the case.</p>"},{"location":"problems/#there-are-a-lot-of-filesthings-to-process","title":"There are a lot of files/things to process","text":"<p>Unlike Mypy, Pyright does not cache previous results. As such, everytime it runs on a given file, it also has to reprocess all other files that file depends on.</p> <p>For better performance, use LSP4IJ mode instead.</p>"},{"location":"problems/#your-code-triggers-a-pyright-bug","title":"Your code triggers a Pyright bug","text":"<p>In some rare cases, Pyright might be stuck in an infinite loop or similar.</p> <p>If this seems to be the case, treat it as a fatal error.</p>"},{"location":"problems/#other-problems","title":"Other problems","text":"<p>For command line mode, you can start debugging by running the commands manually. The command for the current file can be retrieved using a provided IDE action.</p>"},{"location":"configurations/","title":"Configurations","text":"<p>The plugin provides two configuration panels:</p> <ul> <li>Pyright (Global) for application-level settings, and</li> <li>Pyright (Project) for project-level settings.</li> </ul> <p>They can be found under the Tools section of the Settings panel.</p> <p>For the plugin to work, at least one executable needs to be specified. Note that different running modes require different executables.</p> <p>To configure highlight severity levels, use the inspection entry's corresponding pane.</p>"},{"location":"configurations/executables/","title":"Executables","text":""},{"location":"configurations/executables/#executable-and-language-server-executable","title":"Executable and language server executable","text":"<p>The <code>pyright</code> (or <code>pyright-python</code>) and <code>pyright-langserver</code> (or <code>pyright-python-langserver</code>) files can be found in the following locations:</p> <p>What are these executables used for?</p> <p>How do I install the executables?</p> <p>What's the difference between these files?</p> <p>Note</p> <p>The locations mentioned here are for Pip and NPM-like managers. For other tools (e.g. Homebrew), see their documentation to know where they store their executable files.</p> Manager Type OS Directory NPM Global Windows <code>%APPDATA%\\npm</code> NPM Global Linux <code>/usr/local/bin</code> Pip Global Windows <code>%LOCALAPPDATA%\\Programs\\Python\\&lt;version&gt;\\Scripts</code> Pip Global Linux <code>~/.local/bin</code> NPM Local Windows <code>.\\node_modules\\.bin</code> NPM Local Linux <code>./node_modules/.bin</code> Pip Local Windows <code>.\\&lt;your-venv&gt;\\Scripts</code> Pip Local Linux <code>./&lt;your-venv&gt;/bin</code> <p>If the executables can't be found in the aforementioned locations, see the following pages for more information:</p> <ul> <li>Where does npm install packages? - Stack Overflow</li> <li>Where does pip install its packages? - Stack Overflow</li> <li>folders - npm Docs</li> </ul> <p>If a relative path is specified, it would be interpreted as relative to the project directory.</p> <p>The executables are used as-is with no additional checks. This is useful if you want to use a Pyright fork or a custom script.</p> <p>Tip</p> <p>For the best experience, always use or maintain compatibility with the latest version of Pyright.</p>"},{"location":"configurations/executables/#configuration-files","title":"Configuration files","text":"Used by running mode(s) Default Corresponding CLI option Command line Project's root directory <code>--project</code> <p>Despite being called \"file\", this can be a path to a directory containing a <code>pyrightconfig.json</code> and/or a <code>pyproject.toml</code> (the former takes precedence if both are present).</p> <ul> <li>If a local executable is specified, the local path is used.</li> <li>If only the global executable is specified, the local path is used.</li> <li>If no local configuration file is specified, the global is used.</li> </ul> <p>If the path retrieved using the aforementioned strategy is not specified, the project's root directory is used.</p> <p>Note</p> <p>This configuration is deliberately unsupported by LSP. The language server will search for the configuration file(s) inside the root directory of the workspace.</p>"},{"location":"configurations/executables/#always-use-global","title":"Always use global","text":"Used by running mode(s) Default N/A <code>false</code> <p>Enable this setting to always use the global executables and configuration file.</p>"},{"location":"configurations/executables/#auto-suggest-executable","title":"Auto-suggest executable","text":"Used by running mode(s) Default N/A <code>true</code> <p>Enable this setting to automatically find and suggest an executable for the current project on open. See the corresponding feature for more information.</p>"},{"location":"configurations/executables/#ui-hints","title":"UI hints","text":"<p>As a path field is edited, the small hint under the field will show whether the path is valid or invalid.</p> <p>This is only used to give a general hint; a path can still be saved even if it is marked as invalid.</p>"},{"location":"configurations/inspection/","title":"Inspection","text":""},{"location":"configurations/inspection/#inspection-entry","title":"Inspection entry","text":"<p>This plugin can be disabled by disabling the inspection Pyright diagnostics, which can be found under Editor | Inspections. However, this is not recommended for other purposes than debugging.</p>"},{"location":"configurations/inspection/#highlight-severity-levels","title":"Highlight severity levels","text":"<p>Pyright diagnostics have three possible levels: Error, warning, and information. These can be mapped to different highlight severity levels in the IDE.</p> <p>The target levels can be configured via the inspection's corresponding settings pane.</p> <p>Only the levels defined in the dropdowns under the Options pane are honored.</p> <p></p> <p>These levels are semantical, not visual.</p> <p>The Information level is the only one not considered \"problematic\" by the IDE. Annotations of this kind will not be reported as \"problems\" during batch inspections (File, Project Errors and similar tabs in the Problems tool window).</p> <p>Note</p> <p>Despite having no visible effects, Information annotations are still shown on hover.</p> InformationWeak warning <p></p> <p></p>"},{"location":"configurations/inspection/#recommended-levels","title":"Recommended levels","text":"Diagnostic For most users (default) For lax users Error Error Warning Warning Warning Weak warning Information Weak warning Weak warning"},{"location":"configurations/other/","title":"Other settings","text":""},{"location":"configurations/other/#tooltip-settings","title":"Tooltip settings","text":"<p>These options are not applied retroactively; you need to make an edit to see the effect.</p>"},{"location":"configurations/other/#use-editor-font","title":"Use editor font","text":"Used by running mode(s) Default Command line <code>false</code> <p>Enable this setting to display tooltips in the editor font.</p> EnabledDisabled <p></p> <p></p>"},{"location":"configurations/other/#add-prefix","title":"Add prefix","text":"Used by running mode(s) Default Command line <code>false</code> <p>Enable this setting to prefix tooltips with \"Pyright:\".</p> EnabledDisabled <p></p> <p></p>"},{"location":"configurations/other/#command-line-mode-specific-settings","title":"Command-line-mode-specific settings","text":""},{"location":"configurations/other/#process-timeout","title":"Process timeout","text":"Default Corresponding CLI option 10 seconds N/A <p>Modify this setting to set a maximum limit (in milliseconds) each process should take before it is forcibly destroyed.</p> <p>A value of -1 disables the timeout.</p> <p>Warning</p> <p>If there is no time limit, the process might run indefinitely in cases of bugs, leading to undesired CPU and RAM usage.</p>"},{"location":"configurations/other/#number-of-threads","title":"Number of threads","text":"Default Corresponding CLI option 0 <code>--threads</code> <p>Modify this setting to paralellize type checking on up to the specified number of threads.</p> <p>A value of 0 means nothing is passed to the executable.</p> <p>Warning</p> <p>The <code>--thread</code> option is only available in Pyright 1.1.371 and later. Modifying it will cause an error for older versions.</p>"},{"location":"configurations/other/#minimum-severity-level","title":"Minimum severity level","text":"Default Corresponding CLI option Information <code>--level</code> <p>Modify this setting to set a minimum threshold that only diagnostics whose severity is equal or higher than it will be emitted.</p> InformationWarningError <p></p> <p></p> <p></p>"},{"location":"configurations/other/#locale","title":"Locale","text":"Default Corresponding environment variable Default <code>LC_ALL</code> <p>Modify this option to make the language server emit messages in different languages.</p>"},{"location":"configurations/running-modes/","title":"Running modes","text":"<p>Each distribution of Pyright comes with two executables: <code>pyright</code> (also referred to as \"executable\") and <code>pyright-langserver</code> (\"language server executable\").</p> <p>Aside from the main functionality discussed here, the first also provides a few more features and options, some of which are supported or used by this plugin.</p> <p>Different running modes use different executables.</p> <p>To make the most of this plugin, you are recommended to specify both executables.</p>"},{"location":"configurations/running-modes/#comparison-tables","title":"Comparison tables","text":"<code>pyright</code> <code>pyright-langserver</code> Process type Stops when finishes checking the file(s) Long-running process Result Only type checking diagnostics Diagnostics and other LSP features Performance Good Better in many cases File reading method From disk File contents are sent via stdio Potentially infinite processes Long processes are forcibly destroyed Processes must be terminated manually Command line mode LSP4IJ mode Executable used <code>pyright</code> <code>pyright-langserver</code> Executable invoked After each change On project/supported file open Side effect Will save all files to ensure synchronization No side effects Error reporting Notifications and IDE log LSP4IJ console, notifications and IDE log"},{"location":"configurations/running-modes/#command-line-mode","title":"Command line mode","text":"<p>If this mode is selected, everytime a Python file is edited, this plugin will save it along with other (unsaved) files, then invoke the executable in a subprocess. The result of this process is rerouted back to the IDE in the form of visual annotations.</p> <p>This mode requires two things to work correctly:</p> <ul> <li>That the executable you provide accepts said arguments, and</li> <li>that it outputs diagnostics in the formats defined here.</li> </ul> <p>If any of these requirements are not met, a notification will be displayed.</p> <p>Due to backward compatibility, this is the default mode. However, for better performance, LSP4IJ mode is recommended.</p>"},{"location":"configurations/running-modes/#lsp4ij-mode","title":"LSP4IJ mode","text":"<p>If this mode is selected, the language server will be invoked on project open. All LSP messages are then handled by the various features of the LSP4IJ plugin, a third-party LSP client for JetBrains IDEs.</p> <p>It is possible to use Pyright with LSP4IJ directly, but doing so is not recommended.</p>"}]}