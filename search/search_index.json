{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Pyright for PyCharm user documentation","text":"<p>This plugin provides Pyright integration for PyCharm.</p>"},{"location":"#screenshots","title":"Screenshots","text":""},{"location":"configurations/","title":"Configurations","text":""},{"location":"configurations/#generic","title":"Generic","text":""},{"location":"configurations/#executable","title":"Executable","text":"<p>For the plugin to work, you need to define at least one executable file using either the Global or Project panel.</p> <p>Such a file is typically named <code>pyright</code>/<code>pyright-python</code> (see the FAQ for the difference) and can likely be found in:</p> Manager Type OS Directory NPM Global Windows <code>%APPDATA%\\npm</code> NPM Global Linux <code>/usr/local/bin</code> Pip Global Windows <code>%LOCALAPPDATA%\\Programs\\Python\\&lt;version&gt;\\Scripts</code> Pip Global Linux <code>~/.local/bin</code> NPM Local Windows <code>.\\node_modules\\.bin</code> NPM Local Linux <code>./node_modules/.bin</code> Pip Local Windows <code>.\\&lt;your-venv&gt;\\Scripts</code> Pip Local Linux <code>./&lt;your-venv&gt;/bin</code> <p>If you can't find the executables in the aforementioned locations, see the following pages for more information:</p> <ul> <li>Where does npm install packages? - Stack Overflow</li> <li>Where does pip install its packages? - Stack Overflow</li> <li>NPM folders guide</li> </ul> <p>You can also use a relative path. It would be interpreted as relative to the project directory.</p> <p>The executable is used as-is with no additional checks, so the plugin will still work even if, for example, it's a wrapper script that outputs diagnostics in the expected format.</p>"},{"location":"configurations/#configuration-file","title":"Configuration file","text":"<p>Despite being called \"file\", this can be a path to a directory containing a <code>pyright-config.json</code> and/or a <code>pyproject.toml</code> (the former takes precedence if both are present). This path will be passed to the executable via the <code>--project</code> option.</p> <ul> <li>If the executable is local, only the local path is used.</li> <li>If the executable is global, the local path is used if it is specified,   falling back to the global one.</li> </ul> <p>If the path retrieved using the aforementioned strategy is not specified, the project directory is used.</p>"},{"location":"configurations/#global","title":"Global","text":""},{"location":"configurations/#always-use-global","title":"Always use global","text":"<p>Check this option to always use the global executable and configuration file.</p> <p>Default: <code>false</code></p>"},{"location":"configurations/#use-editor-font","title":"Use editor font","text":"<p>Check this option to display annotations in your editor font. This option is not applied retroactively; you might need to make an edit to see the effect.</p> <p>Default: <code>false</code></p>"},{"location":"configurations/#add-prefix-to-tooltips","title":"Add prefix to tooltips","text":"<p>Check this option to prefix tooltips with \"Pyright:\". This option is not applied retroactively; you might need to make an edit to see the effect.</p> <p>Default: <code>false</code></p>"},{"location":"configurations/#project","title":"Project","text":""},{"location":"configurations/#auto-suggest-executable","title":"Auto-suggest executable","text":"<p>Check this option to automatically find and suggest an executable for the current project on open. See the corresponding feature for more information.</p> <p>Default: <code>true</code></p>"},{"location":"configurations/#related","title":"Related","text":""},{"location":"configurations/#ui-hints","title":"UI hints","text":"<p>As you edit a path field, the small hint under the field will show whether the path is valid or invalid.</p> <p>This is only used to give a general hint; a path can still be saved even if it is marked as invalid.</p>"},{"location":"faq/","title":"Frequently asked questions","text":""},{"location":"faq/#what-exactly-is-this-plugin-doing","title":"What exactly is this plugin doing?","text":"<p>In a nutshell:</p> <ul> <li>You edit your code.</li> <li>This plugin saves your (unsaved) files.</li> <li>It then invokes the executable(s) provided by you   with some hardcoded arguments.</li> <li>The results of which are used to show annotations.</li> </ul> <p>And that's it.</p> <p>It expects two things:</p> <ul> <li>That the executable you provide accepts said arguments, and</li> <li>that it outputs diagnostics in the formats specified here.</li> </ul> <p>As long as you respect these requirements, you can use your own script, or whatever. If you don't, expect some big bad error messages.</p>"},{"location":"faq/#my-code-should-have-nothese-errors-but-it-doesdoesnt","title":"My code should have no/these errors, but it does/doesn't.","text":"<p>This plugin contains no type checking logic. For type checking bugs, please report them to the Pyright issue tracker.</p>"},{"location":"faq/#whats-the-difference-between-pyright-and-pyright-python","title":"What's the difference between <code>pyright</code> and <code>pyright-python</code>?","text":"<p>Pyright is written in TypeScript and published on NPM, mainly for the purpose of better integration with VSCode. This requires a dependency on Node, which Python developers might not have on their development machines.</p> <p>The <code>pyright</code> package on PyPI was created to solve this problem. It will automatically install the actual NPM package and places 4 proxy executables in the same virtual environment/directory you have your <code>pip</code> in:</p> <ul> <li><code>pyright</code>/<code>pyright-langserver</code> (these have the same names as the originals)</li> <li><code>pyright-python</code>/<code>pyright-python-langserver</code></li> </ul> <p>These proxies will re-output the results of the original executables. With the correct configurations, new versions can be automatically installed at runtime.</p> <p>If you use this package, the original executables can typically be found at:</p> <ul> <li>Windows: <code>%HOMEPATH%/.cache/pyright-python/&lt;version&gt;/node_modules/.bin</code></li> <li>Linux: <code>~/.cache/pyright-python/&lt;version&gt;/node_modules/.bin</code></li> </ul> <p>For more information on how to configure this location, see Pyright for Python's documentation.</p>"},{"location":"faq/#why-does-this-plugin-have-to-perform-saves-so-often","title":"Why does this plugin have to perform saves so often?","text":"<p>Pyright does not support passing files from stdin. A feature request was made and quickly rejected.</p> <p>Adding an option that makes the plugin run only on \"manual\" saves (the Save All action) is counter-productive, since that don't guarantee the annotator class is called. This is a known limitation.</p> <p>If you use PyCharm Professional, you should be using the sister plugin instead. It relies on experimental APIs and thus not as stable, but much faster and does not require saving.</p>"},{"location":"faq/#is-watch-mode-watch-supported","title":"Is watch mode (<code>--watch</code>) supported?","text":"<p>Supporting for watch mode is on the roadmap. There is no ETA, however.</p>"},{"location":"faq/#why-does-it-take-so-long-to-run-on-my-project","title":"Why does it take so long to run on my project?","text":"<p>Since this plugin invokes a CLI tool, it must be registered as an <code>ExternalAnnotator</code>. Inspectors of this kind will only run when all other background tasks have finished.</p> <p>Unlike Mypy, Pyright does not cache previous results in a hidden directory. As such, everytime it runs on a given file, it also has to reprocess all other files that file depends on.</p> <p>Again, for better performance, the sister plugin is recommended.</p>"},{"location":"faq/#is-this-plugin-affiliated-with-microsoftjetbrains","title":"Is this plugin affiliated with Microsoft/JetBrains?","text":"<p>No, or at least not in a business or ownership sense.</p> <p>It was, however, created out of adoration of Pyright and JetBrains IDEs.</p>"},{"location":"faq/#i-love-this-plugin-how-can-i-support-it","title":"I love this plugin. How can I support it?","text":"<p>Please consider sponsoring the sister plugin.</p> <p>These plugins are similar in many ways and were created by the same author, but the development for the other one requires (paid) subscriptions, as the experimental LSP APIs are not yet available in PyCharm Community Edition.</p>"},{"location":"features/","title":"Other features","text":""},{"location":"features/#executable-suggestion","title":"Executable suggestion","text":"<p>When a project is opened, a suggestion to set a file as the executable for that project is shown if and only if:</p> <ul> <li>The interpreter of the project exists and is located inside it.</li> <li>There is a file named <code>pyright</code> (with or without extension)   among the siblings of the interpreter.</li> <li>The project executable is not yet given.</li> <li>The global executable is not preferred.</li> </ul> <p>Available actions:</p> <ul> <li>Absolute path: Set the absolute path.</li> <li>Relative path: Set the relative path (no leading dot).</li> <li>Do not suggest: Turn off the corresponding option.</li> </ul>"},{"location":"problems/","title":"Problems and solutions","text":""},{"location":"problems/#no-annotations","title":"No annotations","text":"<p>Make sure that:</p> <ul> <li> <p>Your project has the correct interpreter set   (Project | Python Interpreter, or a cell in the status bar).</p> </li> <li> <p>The executable is given   (Tools | Pyright (Global) / Pyright (Project))   and is correct.</p> </li> <li> <p>The plugin itself is enabled (Plugins).</p> </li> <li> <p>The inspection is enabled   (Editor | Inspections -&gt; Pyright inspections).</p> </li> <li> <p>The file is an actual Python file on disk, not an injected fragment   (see the FAQ for more information).</p> </li> </ul> <p>Other things to try:</p> <ul> <li>Reinstalling the plugin or update to the latest version.</li> <li>Reopen the files or restart the IDE.</li> <li>Restart your machine.</li> </ul> <p>If the problem persists, please report it to the issue tracker.</p>"},{"location":"problems/#fatal-error","title":"Fatal error","text":"<p>This most likely suggests a Pyright bug.</p> <p>Disable the plugin immediately to avoid hardware problems. Try to narrow the problem as much as possible, then report it to Pyright's issue tracker.</p>"},{"location":"problems/#cannot-parse-configuration-file","title":"Cannot parse configuration file","text":"<p>This most likely means that the configuration file is invalid in some way.</p> <p>To know which file is being used, see the configuration docs. Alternatively, use the \"Open file\" action to directly open the file which is reported to be invalid by Pyright.</p>"},{"location":"problems/#unrecognized-cli-options","title":"Unrecognized CLI options","text":"<p>This most likely means that the executable you provide doesn't support the options this plugin uses.</p> <p>If you are using the official NPM package or the community-maintained PyPI package, please report the problem to the issue tracker along with the version of Pyright you are using, which can be retrieved by running <code>&lt;path-to-pyright&gt; --version</code> in your terminal.</p> <p>If the executable is something you come up with, check the source code for expected options.</p>"}]}