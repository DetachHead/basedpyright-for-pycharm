{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Pyright for PyCharm user documentation","text":"<p>This site serves as the user documentation for the Pyright for PyCharm project. The project includes two plugins:</p> The CLI-based plugin The LSP-based plugin Repository pyright-for-pycharm pyright-langserver-for-pycharm Marketplace name Pyright Pyright Language Server Codename CLI LSP <p>In this documentation, the two plugins will be referred to using their codenames.</p>"},{"location":"#choosing-the-right-plugin","title":"Choosing the right plugin","text":"<p>TLDR: Professional \u2192 LSP; Community \u2192 CLI.</p> <p>These two plugins have the same naming conventions, are maintained by the same person, have similar (but not identical) configurations, but are meant for different target users.</p> <p>LSP is dependent on the experimental language server protocol APIs which are only available for PyCharm Professional and other paid IDEs since 2023.2. This means that PyCharm Community users cannot use it.</p> <p>On the other hand, CLI can be used by both. However, due to its limited capabilities and performance reason, it is recommended that PyCharm Professional users use LSP instead.</p> <p>Warning</p> <p>Do not install both plugins. While doing so will likely cause no technical issues, their functionality overlaps a lot.</p>"},{"location":"faq/","title":"Frequently asked questions","text":""},{"location":"faq/#what-exactly-is-this-plugin-doing","title":"What exactly is this plugin doing?","text":""},{"location":"faq/#cli","title":"CLI","text":"<p>In a nutshell:</p> <ul> <li>You edit your code.</li> <li>This plugin saves your (unsaved) files.</li> <li>It then invokes the executable(s) provided by you   with some hardcoded arguments.</li> <li>The results of which are used to show annotations.</li> </ul> <p>And that's it.</p> <p>It expects two things:</p> <ul> <li>That the executable you provide accepts said arguments, and</li> <li>that it outputs diagnostics in the formats specified here.</li> </ul> <p>As long as you respect these requirements, you can use your own script, or whatever. If you don't, expect some big bad error messages.</p>"},{"location":"faq/#lsp","title":"LSP","text":"<p>Most of the logic is already defined by either the @eclipse-lsp4j/lsp4j library or the experimental language server protocol APIs. LSP simply glues these and the Pyright language server together.</p> <p>Again, the executable is not checked. You can use your own hand-hacked version if you feel like it.</p>"},{"location":"faq/#my-code-should-have-nothese-errors-but-it-doesdoesnt","title":"My code should have no/these errors, but it does/doesn't.","text":"<p>Both CLI and LSP contain no type checking logic. For type checking bugs, please report them to the Pyright issue tracker.</p>"},{"location":"faq/#whats-the-difference-between-the-pyright-and-pyright-python-files","title":"What's the difference between the <code>pyright</code> and <code>pyright-python</code> files?","text":"<p>Pyright is written in TypeScript and officially published on NPM, mainly for the purpose of better integration with VSCode. This requires a dependency on Node, which Python developers might not have on their development machines.</p> <p>The PyPI <code>pyright</code> package was created to solve this problem. When installed, it places 4 proxy executables in the same virtual environment/directory you have your <code>pip</code> in:</p> <ul> <li><code>pyright</code>/<code>pyright-langserver</code> (these have the same names as the originals)</li> <li><code>pyright-python</code>/<code>pyright-python-langserver</code></li> </ul> <p>These proxies will automatically install the actual NPM package if it is not already installed, then re-output the results of the original executables. With the correct configurations, new versions may be automatically installed at runtime.</p> <p>If the corresponding version of the NPM package has not been installed, the proxies will also re-output the \"added 1 package\" notice by NPM, which will cause parsing errors. Due to this, it is recommended that the original executables are used instead.</p> <p>Said original executables can typically be found at:</p> <ul> <li>Windows: <code>%HOMEPATH%/.cache/pyright-python/&lt;version&gt;/node_modules/.bin</code></li> <li>Linux: <code>~/.cache/pyright-python/&lt;version&gt;/node_modules/.bin</code></li> </ul>"},{"location":"faq/#why-does-cli-have-to-perform-saves-so-often","title":"Why does CLI have to perform saves so often?","text":"<p>Pyright only reads actual files on disk. It does not support passing files from stdin. A feature request was made and quickly rejected.</p> <p>Adding an option that makes CLI run only on \"manual\" saves (the Save All action) is counter-productive, since that doesn't guarantee the annotator class is called. This is a known limitation.</p> <p>If you use PyCharm Professional, you should be using LSP instead.</p>"},{"location":"faq/#is-the-command-line-watch-mode-watch-supported","title":"Is the command-line watch mode (<code>--watch</code>) supported?","text":"<p>Support for <code>--watch</code> is on the roadmap. There is no ETA, however.</p>"},{"location":"faq/#why-does-cli-take-so-long-to-run-on-my-project","title":"Why does CLI take so long to run on my project?","text":"<p>There are multiple possible reasons for this.</p>"},{"location":"faq/#other-inspections-are-taking-too-long","title":"Other inspections are taking too long","text":"<p>Since CLI invokes a command-line tool, it must be registered as an <code>ExternalAnnotator</code>. Inspectors of this kind will only run when all other background tasks have finished.</p> <p>Check your other plugins to see if this is the case.</p>"},{"location":"faq/#there-are-a-lot-of-filesthings-to-process","title":"There are a lot of files/things to process","text":"<p>Unlike Mypy, Pyright does not cache previous results. As such, everytime it runs on a given file, it also has to reprocess all other files that file depends on.</p> <p>Again, for better performance, LSP is recommended.</p>"},{"location":"faq/#your-code-triggers-a-pyright-bug","title":"Your code triggers a Pyright bug","text":"<p>In some rare cases, Pyright might be stuck in an infinite loop or similar.</p> <p>If this seems to be the case, treat it as a fatal error.</p>"},{"location":"faq/#is-this-plugin-affiliated-with-microsoftjetbrains","title":"Is this plugin affiliated with Microsoft/JetBrains?","text":"<p>No, or at least not in a business or ownership sense.</p> <p>It was, however, created out of adoration of Pyright and JetBrains IDEs.</p>"},{"location":"faq/#i-love-this-project-how-can-i-support-it","title":"I love this project. How can I support it?","text":"<p>You can consider sponsoring it.</p> <p>If you are feeling generous, see <code>CONTRIBUTING.md</code> for how to contribute non-financially.</p>"},{"location":"features/","title":"Other features","text":""},{"location":"features/#executable-suggestion","title":"Executable suggestion","text":"<p>When a project is opened, a suggestion to set a file as the executable for that project is shown if:</p> <ul> <li>The interpreter of the project exists and is located inside it.</li> <li>There is a file named <code>pyright</code> (with or without extension)   among the siblings of the interpreter.</li> <li>The project executable is not yet given.</li> <li>The global executable is not preferred.</li> </ul> <p>Available actions:</p> <ul> <li>Absolute path: Set the absolute path.</li> <li>Relative path: Set the relative path (no leading dot).</li> <li>Do not suggest: Turn off the corresponding option.</li> </ul>"},{"location":"problems/","title":"Problems and solutions","text":""},{"location":"problems/#no-annotations","title":"No annotations","text":"<p>Make sure that:</p> <ul> <li>Your project has the correct interpreter set   (Project | Python Interpreter, or a cell in the status bar).</li> <li>The executable is given and is correct.</li> <li>The plugin itself is enabled (Plugins).</li> <li>The corresponding inspection is enabled   (Editor | Inspections \u2192   Pyright inspections/Pyright LS inspections).</li> <li>(CLI) The file is an actual Python file on disk, not an injected fragment.</li> </ul> Why does CLI need the file to be an actual file? <p>TLDR: Pyright only supports reading files from disk, not stdin.</p> <p>Other things to try:</p> <ul> <li>Reinstall the plugin or update to the latest version.</li> <li>Reopen the files, reopen the project or restart the IDE.</li> <li>(LSP) Restart the language server.</li> <li>Restart your machine.</li> </ul> <p></p> <p>If the problem persists, please report it to the corresponding issue tracker.</p>"},{"location":"problems/#fatal-error","title":"Fatal error","text":"<p>This most likely suggests a Pyright bug.</p> <p>Disable the plugin immediately to avoid hardware problems. Try to narrow the problem as much as possible, then report it to Pyright's issue tracker.</p>"},{"location":"problems/#cannot-parse-configuration-file","title":"Cannot parse configuration file","text":"<p>This most likely means that the configuration file is invalid in some way.</p> <p>To know which file is being used, see the configuration docs. Alternatively, use the \"Open file\" action to directly open the file which is reported to be invalid.</p>"},{"location":"problems/#unrecognized-command-line-options","title":"Unrecognized command-line options","text":"<p>This most likely means that the executable you provide doesn't support the options used by the plugin.</p> <p>If you are using the official NPM package or the community-maintained PyPI package, please report the problem to the corresponding issue tracker along with the version of Pyright you are using, which can be retrieved by running <code>&lt;path-to-pyright&gt; --version</code> in your terminal.</p> <p>If the executable is something you come up with, check the source code for expected options.</p>"},{"location":"usage/","title":"Usage","text":"CLILSP <p>Go to Settings | Tools | Pyright (Global) / Pyright (Project) and set the path to your Pyright executable.</p> <p></p> <p>Save, return to your file and start making some modifications. You should see Pyright annotations in a few seconds. If not, refer to Problems and solutions.</p> <p>Go to Settings | Tools | Pyright LS (Global) / Pyright LS (Project) and set the path to your Pyright language server executable.</p> <p></p> <p>You might need to reopen your files or restart the IDE for the files to be recognized by the language server. If that doesn't work, refer to Problems and solutions.</p>"},{"location":"configurations/cli/","title":"CLI-specific configurations","text":""},{"location":"configurations/cli/#configuration-file","title":"Configuration file","text":"<p>Note</p> <p>This configuration is deliberately unsupported by LSP. The language server will search for the configuration file(s) inside the root directory of the workspace.</p> <p>Despite being called \"file\", this can be a path to a directory containing a <code>pyrightconfig.json</code> and/or a <code>pyproject.toml</code> (the former takes precedence if both are present). This path will be passed to the executable via the <code>--project</code> option.</p> <ul> <li>If the executable is local, only the local path is used.</li> <li>If the executable is global, the local path is used if it is specified,   falling back to the global one.</li> </ul> <p>If the path retrieved using the aforementioned strategy is not specified, the project directory is used.</p>"},{"location":"configurations/common/","title":"Common configurations","text":""},{"location":"configurations/common/#executable","title":"Executable","text":"<p>For CLI/LSP to work, at least one executable file needs to be defined using either the Global or Project panel.</p> <p>Such a file is typically named <code>pyright</code>/<code>pyright-python</code> (CLI) or <code>pyright-langserver</code>/<code>pyright-python-langserver</code> (LSP) and can likely be found in:</p> What's the difference between these files? <p>TLDR: Some may output \"unexpected\" things.</p> Manager Type OS Directory NPM Global Windows <code>%APPDATA%\\npm</code> NPM Global Linux <code>/usr/local/bin</code> Pip Global Windows <code>%LOCALAPPDATA%\\Programs\\Python\\&lt;version&gt;\\Scripts</code> Pip Global Linux <code>~/.local/bin</code> NPM Local Windows <code>.\\node_modules\\.bin</code> NPM Local Linux <code>./node_modules/.bin</code> Pip Local Windows <code>.\\&lt;your-venv&gt;\\Scripts</code> Pip Local Linux <code>./&lt;your-venv&gt;/bin</code> <p>If the executables can't be found in the aforementioned locations, see the following pages for more information:</p> <ul> <li>Where does npm install packages? - Stack Overflow</li> <li>Where does pip install its packages? - Stack Overflow</li> <li>folders - npm Docs</li> </ul> <p>You can also use a relative path. It would be interpreted as relative to the project directory.</p> <p>The executable is used as-is with no additional checks, so CLI/LSP will still work even if, for example, it's a wrapper script that outputs diagnostics in the expected format.</p>"},{"location":"configurations/common/#always-use-global","title":"Always use global","text":"<p>Check this option to always use the global executable and configuration file.</p> <p>Default: <code>false</code></p>"},{"location":"configurations/common/#use-editor-font","title":"Use editor font","text":"<p>Check this option to display annotations in the editor font. This option is not applied retroactively; you might need to make an edit to see the effect.</p> <p>Default: <code>false</code></p>"},{"location":"configurations/common/#add-prefix-to-tooltips","title":"Add prefix to tooltips","text":"<p>Check this option to prefix tooltips with \"Pyright:\". This option is not applied retroactively; you might need to make an edit to see the effect.</p> <p>Default: <code>false</code></p>"},{"location":"configurations/common/#auto-suggest-executable","title":"Auto-suggest executable","text":"<p>Check this option to automatically find and suggest an executable for the current project on open. See the corresponding feature for more information.</p> <p>Default: <code>true</code></p>"},{"location":"configurations/lsp/","title":"LSP-specific configurations","text":"<p>This page is currently empty</p>"},{"location":"configurations/related/","title":"Related","text":"<p>CLI and LSP employs the following additional features to ease the configuring process.</p>"},{"location":"configurations/related/#ui-hints","title":"UI hints","text":"<p>As a path field is edited, the small hint under the field will show whether the path is valid or invalid.</p> <p>This is only used to give a general hint; a path can still be saved even if it is marked as invalid.</p>"}]}